<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: table_store_search.proto

namespace Aliyun\OTS\ProtoBuffer\Protocol;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>aliyun.OTS.ProtoBuffer.Protocol.ScanQuery</code>
 */
class ScanQuery extends \Aliyun\OTS\ProtoBuffer\Protocol\Message
{
    /**
     * Generated from protobuf field <code>optional .aliyun.OTS.ProtoBuffer.Protocol.Query query = 1;</code>
     */
    private $query = null;
    private $has_query = false;
    /**
     * Generated from protobuf field <code>optional int32 limit = 2;</code>
     */
    private $limit = 0;
    private $has_limit = false;
    /**
     *unit is second
     *
     * Generated from protobuf field <code>optional int32 alive_time = 3;</code>
     */
    private $alive_time = 0;
    private $has_alive_time = false;
    /**
     * Generated from protobuf field <code>optional bytes token = 4;</code>
     */
    private $token = '';
    private $has_token = false;
    /**
     * Generated from protobuf field <code>optional int32 current_parallel_id = 5;</code>
     */
    private $current_parallel_id = 0;
    private $has_current_parallel_id = false;
    /**
     * Generated from protobuf field <code>optional int32 max_parallel = 6;</code>
     */
    private $max_parallel = 0;
    private $has_max_parallel = false;

    public function __construct() {
        \GPBMetadata\TableStoreSearch::initOnce();
        parent::__construct();
    }

    /**
     * Generated from protobuf field <code>optional .aliyun.OTS.ProtoBuffer.Protocol.Query query = 1;</code>
     * @return \Aliyun\OTS\ProtoBuffer\Protocol\Query
     */
    public function getQuery()
    {
        return $this->query;
    }

    /**
     * Generated from protobuf field <code>optional .aliyun.OTS.ProtoBuffer.Protocol.Query query = 1;</code>
     * @param \Aliyun\OTS\ProtoBuffer\Protocol\Query $var
     * @return $this
     */
    public function setQuery($var)
    {
        GPBUtil::checkMessage($var, \Aliyun\OTS\ProtoBuffer\Protocol\Query::class);
        $this->query = $var;
        $this->has_query = true;

        return $this;
    }

    public function hasQuery()
    {
        return $this->has_query;
    }

    /**
     * Generated from protobuf field <code>optional int32 limit = 2;</code>
     * @return int
     */
    public function getLimit()
    {
        return $this->limit;
    }

    /**
     * Generated from protobuf field <code>optional int32 limit = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setLimit($var)
    {
        GPBUtil::checkInt32($var);
        $this->limit = $var;
        $this->has_limit = true;

        return $this;
    }

    public function hasLimit()
    {
        return $this->has_limit;
    }

    /**
     *unit is second
     *
     * Generated from protobuf field <code>optional int32 alive_time = 3;</code>
     * @return int
     */
    public function getAliveTime()
    {
        return $this->alive_time;
    }

    /**
     *unit is second
     *
     * Generated from protobuf field <code>optional int32 alive_time = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setAliveTime($var)
    {
        GPBUtil::checkInt32($var);
        $this->alive_time = $var;
        $this->has_alive_time = true;

        return $this;
    }

    public function hasAliveTime()
    {
        return $this->has_alive_time;
    }

    /**
     * Generated from protobuf field <code>optional bytes token = 4;</code>
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * Generated from protobuf field <code>optional bytes token = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkString($var, False);
        $this->token = $var;
        $this->has_token = true;

        return $this;
    }

    public function hasToken()
    {
        return $this->has_token;
    }

    /**
     * Generated from protobuf field <code>optional int32 current_parallel_id = 5;</code>
     * @return int
     */
    public function getCurrentParallelId()
    {
        return $this->current_parallel_id;
    }

    /**
     * Generated from protobuf field <code>optional int32 current_parallel_id = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setCurrentParallelId($var)
    {
        GPBUtil::checkInt32($var);
        $this->current_parallel_id = $var;
        $this->has_current_parallel_id = true;

        return $this;
    }

    public function hasCurrentParallelId()
    {
        return $this->has_current_parallel_id;
    }

    /**
     * Generated from protobuf field <code>optional int32 max_parallel = 6;</code>
     * @return int
     */
    public function getMaxParallel()
    {
        return $this->max_parallel;
    }

    /**
     * Generated from protobuf field <code>optional int32 max_parallel = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxParallel($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_parallel = $var;
        $this->has_max_parallel = true;

        return $this;
    }

    public function hasMaxParallel()
    {
        return $this->has_max_parallel;
    }

}

